From: Oliver Reiche <oliver.reiche@gmail.com>
Date: Sat, 23 Dec 2023 17:39:54 +0100
Subject: [preprocess] AtomicValue: Enable copies and moves

---
 src/buildtool/multithreading/atomic_value.hpp | 35 +++++++++++++++++--
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/src/buildtool/multithreading/atomic_value.hpp b/src/buildtool/multithreading/atomic_value.hpp
--- a/src/buildtool/multithreading/atomic_value.hpp
+++ b/src/buildtool/multithreading/atomic_value.hpp
@@ -22,16 +22,30 @@
 #include "src/utils/cpp/atomic.hpp"
 
 // Value that can be set and get atomically. Reset is not thread-safe.
+// Assignment operators will not overwrite existing values.
 template <class T>
 class AtomicValue {
   public:
     AtomicValue() noexcept = default;
-    AtomicValue(AtomicValue const& other) noexcept = delete;
+    AtomicValue(AtomicValue const& other) noexcept
+        : data_{other.data_.load()} {}
     AtomicValue(AtomicValue&& other) noexcept : data_{other.data_.load()} {}
     ~AtomicValue() noexcept = default;
 
-    auto operator=(AtomicValue const& other) noexcept = delete;
-    auto operator=(AtomicValue&& other) noexcept = delete;
+    auto operator=(AtomicValue const& other) noexcept -> AtomicValue& {
+        auto data = other.data_.load();
+        if (data) {
+            this->SetOnceAndGet([&data]() { return data; });
+        }
+        return *this;
+    }
+    auto operator=(AtomicValue&& other) noexcept -> AtomicValue& {
+        auto data = other.data_.load();
+        if (data) {
+            this->SetOnceAndGet([&data]() { return data; });
+        }
+        return *this;
+    }
 
     // Atomically set value once and return its reference. If this method is
     // called multiple times concurrently, the setter is called only once. In
@@ -50,6 +64,21 @@ class AtomicValue {
         return *data_.load();
     }
 
+    [[nodiscard]] auto SetOnceAndGet(
+        std::function<std::shared_ptr<T>()> const& setter) const& noexcept
+        -> T const& {
+        if (data_.load() == nullptr) {
+            if (not load_.exchange(true)) {
+                data_.store(setter());
+                data_.notify_all();
+            }
+            else {
+                data_.wait(nullptr);
+            }
+        }
+        return *data_.load();
+    }
+
     [[nodiscard]] auto SetOnceAndGet(std::function<T()> const& setter) && =
         delete;
 
-- 
