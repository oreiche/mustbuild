From: Oliver Reiche <oliver.reiche@gmail.com>
Date: Sun, 11 Feb 2024 12:13:52 +0100
Subject: [targets] Support bool and strings in TARGETS

... for config and string fields.
---
 .../build_engine/base_maps/field_reader.hpp   |  7 +++++-
 .../target_map/built_in_rules.cpp             | 16 ++++++++++++++
 .../build_engine/target_map/target_map.cpp    | 22 +++++++++++++++++++
 .../build_engine/target_map/utils.cpp         |  4 ++++
 4 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/src/buildtool/build_engine/base_maps/field_reader.hpp b/src/buildtool/build_engine/base_maps/field_reader.hpp
--- a/src/buildtool/build_engine/base_maps/field_reader.hpp
+++ b/src/buildtool/build_engine/base_maps/field_reader.hpp
@@ -141,8 +141,13 @@ class FieldReader {
 
     [[nodiscard]] auto ReadStringList(std::string const& field_name) const
         -> std::optional<std::vector<std::string>> {
-        auto const& list =
+        auto list =
             GetOrDefault(json_, field_name, nlohmann::json::array());
+        if (list.is_string()) {
+            auto str = list.get<std::string>();
+            list = nlohmann::json::array();
+            list.push_back(std::move(str));
+        }
         if (not list.is_array()) {
             (*logger_)(fmt::format("Field {} in {} {} is not a list",
                                    field_name,
diff --git a/src/buildtool/build_engine/target_map/built_in_rules.cpp b/src/buildtool/build_engine/target_map/built_in_rules.cpp
--- a/src/buildtool/build_engine/target_map/built_in_rules.cpp
+++ b/src/buildtool/build_engine/target_map/built_in_rules.cpp
@@ -1096,6 +1096,10 @@ void GenericRuleWithDeps(
         if (not outs_value) {
             return;
         }
+        if (outs_value->IsString()) {
+            auto str_list = Expression::list_t{outs_value};
+            outs_value = ExpressionPtr{Expression{str_list}};
+        }
         if (not outs_value->IsList()) {
             (*logger)(fmt::format("outs has to evaluate to a list of "
                                   "strings, but found {}",
@@ -1126,6 +1130,10 @@ void GenericRuleWithDeps(
         if (not out_dirs_value) {
             return;
         }
+        if (out_dirs_value->IsString()) {
+            auto str_list = Expression::list_t{out_dirs_value};
+            out_dirs_value = ExpressionPtr{Expression{str_list}};
+        }
         if (not out_dirs_value->IsList()) {
             (*logger)(fmt::format("out_dirs has to evaluate to a list of "
                                   "strings, but found {}",
@@ -1185,6 +1193,10 @@ void GenericRuleWithDeps(
     if (not cmd_value) {
         return;
     }
+    if (cmd_value->IsString()) {
+        auto str_list = Expression::list_t{cmd_value};
+        cmd_value = ExpressionPtr{Expression{str_list}};
+    }
     if (not cmd_value->IsList()) {
         (*logger)(fmt::format(
                       "cmds has to evaluate to a list of strings, but found {}",
@@ -1247,6 +1259,10 @@ void GenericRuleWithDeps(
     if (sh_val->IsNone()) {
         sh_val = Expression::kEmptyList;
     }
+    if (sh_val->IsString()) {
+        auto str_list = Expression::list_t{sh_val};
+        sh_val = ExpressionPtr{Expression{str_list}};
+    }
     if (not sh_val->IsList()) {
         (*logger)(fmt::format("sh has evaluate to list of strings or null, but "
                               "found {}",
diff --git a/src/buildtool/build_engine/target_map/target_map.cpp b/src/buildtool/build_engine/target_map/target_map.cpp
--- a/src/buildtool/build_engine/target_map/target_map.cpp
+++ b/src/buildtool/build_engine/target_map/target_map.cpp
@@ -438,6 +438,17 @@ void withDependencies(
         if (not field_value) {
             return;
         }
+        if (field_value->IsBool()) {
+            auto str_list = Expression::list_t{};
+            if (field_value->Bool()) {
+                str_list.emplace_back(std::string{"true"});
+            }
+            field_value = ExpressionPtr{Expression{str_list}};
+        }
+        if (field_value->IsString()) {
+            auto str_list = Expression::list_t{field_value};
+            field_value = ExpressionPtr{Expression{str_list}};
+        }
         if (not field_value->IsList()) {
             (*logger)(fmt::format("String field {} should be a list of "
                                   "strings, but found {}",
@@ -1018,6 +1029,17 @@ void withRuleDefinition(
         if (not field_value) {
             return;
         }
+        if (field_value->IsBool()) {
+            auto str_list = Expression::list_t{};
+            if (field_value->Bool()) {
+                str_list.emplace_back(std::string{"true"});
+            }
+            field_value = ExpressionPtr{Expression{str_list}};
+        }
+        if (field_value->IsString()) {
+            auto str_list = Expression::list_t{field_value};
+            field_value = ExpressionPtr{Expression{str_list}};
+        }
         if (not field_value->IsList()) {
             (*logger)(fmt::format("Config field {} should evaluate to a list "
                                   "of strings, but got{}",
diff --git a/src/buildtool/build_engine/target_map/utils.cpp b/src/buildtool/build_engine/target_map/utils.cpp
--- a/src/buildtool/build_engine/target_map/utils.cpp
+++ b/src/buildtool/build_engine/target_map/utils.cpp
@@ -162,6 +162,10 @@ auto BuildMaps::Target::Utils::getTainted(
     if (not tainted_val) {
         return false;
     }
+    if (tainted_val->IsString()) {
+        auto str_list = Expression::list_t{tainted_val};
+        tainted_val = ExpressionPtr{Expression{str_list}};
+    }
     if (not tainted_val->IsList()) {
         (*logger)(fmt::format("tainted should evaluate to a list of strings, "
                               "but got {}",
-- 
