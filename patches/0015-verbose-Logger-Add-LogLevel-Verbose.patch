From: Oliver Reiche <oliver.reiche@gmail.com>
Date: Sun, 21 Jan 2024 20:00:32 +0100
Subject: [verbose] Logger: Add LogLevel::Verbose

... and use it for verbose output and action commands.
---
 src/buildtool/common/cli.hpp                  |  6 ++++++
 .../execution_engine/executor/executor.hpp    |  2 +-
 .../graph_traverser/graph_traverser.hpp       |  6 +++---
 src/buildtool/logging/log_level.hpp           |  3 +++
 src/buildtool/logging/log_sink_cmdline.hpp    |  3 +++
 src/buildtool/main/main.cpp                   | 20 +++++++++----------
 .../exports_progress_reporter.cpp             |  2 +-
 src/other_tools/just_mr/cli.hpp               |  6 ++++++
 src/other_tools/just_mr/launch.cpp            |  5 +++--
 src/other_tools/just_mr/main.cpp              |  6 ++++++
 src/other_tools/just_mr/setup.cpp             |  2 +-
 11 files changed, 43 insertions(+), 18 deletions(-)

diff --git a/src/buildtool/common/cli.hpp b/src/buildtool/common/cli.hpp
index 4ba9426d..979db153 100644
--- a/src/buildtool/common/cli.hpp
+++ b/src/buildtool/common/cli.hpp
@@ -255,6 +255,12 @@ static inline auto SetupLogArguments(
                        static_cast<int>(kLastLogLevel),
                        static_cast<int>(kDefaultLogLevel)))
         ->type_name("NUM");
+    app->add_flag_function(
+        "-v,--verbose",
+        [clargs](auto /*unused*/) { clargs->log_limit = LogLevel::Verbose; },
+        fmt::format(
+            "Enable verbose command line output (shortcut for --log-limit={})",
+            static_cast<int>(LogLevel::Verbose)));
     app->add_option_function<std::underlying_type_t<LogLevel>>(
            "--restrict-stderr-log-limit",
            [clargs](auto const& limit) {
diff --git a/src/buildtool/execution_engine/executor/executor.hpp b/src/buildtool/execution_engine/executor/executor.hpp
index 26ce3183..b78be851 100644
--- a/src/buildtool/execution_engine/executor/executor.hpp
+++ b/src/buildtool/execution_engine/executor/executor.hpp
@@ -604,7 +604,7 @@ class ExecutorImpl {
                 }
                 return message;
             };
-        logger.Emit((has_err or has_out) ? LogLevel::Info : LogLevel::Debug,
+        logger.Emit((has_err or has_out) ? LogLevel::Info : LogLevel::Verbose,
                     std::move(build_message));
     }
 
diff --git a/src/buildtool/graph_traverser/graph_traverser.hpp b/src/buildtool/graph_traverser/graph_traverser.hpp
index 93aa235f..f496e10b 100644
--- a/src/buildtool/graph_traverser/graph_traverser.hpp
+++ b/src/buildtool/graph_traverser/graph_traverser.hpp
@@ -645,7 +645,7 @@ class GraphTraverser {
         std::vector<DependencyGraph::ArtifactNode const*> const& artifact_nodes,
         std::map<std::string, ArtifactDescription> const& runfiles) const {
         std::string msg_dbg{"Artifact ids:"};
-        std::string msg_failed{"Failed artifacts:"};
+        std::string msg_failed{"Build result contains failed artifacts:"};
         bool failed{false};
         nlohmann::json json{};
         for (std::size_t pos = 0; pos < paths.size(); ++pos) {
@@ -686,7 +686,7 @@ class GraphTraverser {
         Logger::Log(logger_, LogLevel::Info, "{}", message);
         Logger::Log(logger_, LogLevel::Debug, "{}", msg_dbg);
         if (failed) {
-            Logger::Log(logger_, LogLevel::Info, "{}", msg_failed);
+            Logger::Log(logger_, LogLevel::Warning, "{}", msg_failed);
         }
 
         if (clargs_.build.dump_artifacts) {
@@ -741,7 +741,7 @@ class GraphTraverser {
                 if ((not relpath.empty()) and *relpath.begin() != "..") {
                     Logger::Log(
                         logger_,
-                        LogLevel::Info,
+                        LogLevel::Verbose,
                         "'{}' not a direct logical path of the specified "
                         "target; will take subobject '{}' of '{}'",
                         *(clargs_.build.print_to_stdout),
diff --git a/src/buildtool/logging/log_level.hpp b/src/buildtool/logging/log_level.hpp
index 6323bde5..5e7f9acc 100644
--- a/src/buildtool/logging/log_level.hpp
+++ b/src/buildtool/logging/log_level.hpp
@@ -28,6 +28,7 @@ enum class LogLevel {
     Info,     ///< Informative messages, such as reporting status or statistics
     Progress,     ///< Information about the current progress of the build
     Performance,  ///< Information about performance issues
+    Verbose,      ///< Verbose information for advanced users
     Debug,        ///< Debug messages, such as details from internal processes
     Trace         ///< Trace messages, verbose details such as function calls
 };
@@ -71,6 +72,8 @@ constexpr auto kLastLogLevel = LogLevel::Trace;
             return "";
         case LogLevel::Performance:
             return "PERF";
+        case LogLevel::Verbose:
+            return "INFO";
         case LogLevel::Debug:
             return "DEBUG";
         case LogLevel::Trace:
diff --git a/src/buildtool/logging/log_sink_cmdline.hpp b/src/buildtool/logging/log_sink_cmdline.hpp
index 5c2e07e1..2a2dfac8 100644
--- a/src/buildtool/logging/log_sink_cmdline.hpp
+++ b/src/buildtool/logging/log_sink_cmdline.hpp
@@ -140,6 +140,9 @@ class LogSinkCmdLine final : public ILogSink {
                 case LogLevel::Performance:
                     style = fg(fmt::color::light_sky_blue);
                     break;
+                case LogLevel::Verbose:
+                    style = fg(fmt::color::lime_green);
+                    break;
                 case LogLevel::Debug:
                     style = fg(fmt::color::sky_blue);
                     break;
diff --git a/src/buildtool/main/main.cpp b/src/buildtool/main/main.cpp
index 98cdb53d..196ab6c4 100644
--- a/src/buildtool/main/main.cpp
+++ b/src/buildtool/main/main.cpp
@@ -652,6 +652,9 @@ auto DetermineRoots(gsl::not_null<RepositoryConfig*> const& repository_config,
             }
             if (main_ws_root.has_value()) {
                 ws_root = FileRoot{*main_ws_root};
+                Logger::Log(LogLevel::Verbose,
+                            "Using workspace root {}",
+                            main_ws_root->string());
             }
         }
         if (not ws_root) {
@@ -746,7 +749,8 @@ auto DetermineRoots(gsl::not_null<RepositoryConfig*> const& repository_config,
     return {main_repo, main_ws_root};
 }
 
-void ReportTaintedness(const AnalysisResult& result) {
+void ReportTaintedness(const AnalysisResult& result,
+                       LogLevel level = LogLevel::Info) {
     if (result.target->Tainted().empty()) {
         // Never report untainted targets
         return;
@@ -757,7 +761,7 @@ void ReportTaintedness(const AnalysisResult& result) {
     for (auto const& s : result.target->Tainted()) {
         tainted.push_back(s);
     }
-    Logger::Log(LogLevel::Info, "Target tainted {}.", tainted.dump());
+    Logger::Log(level, "Target tainted {}.", tainted.dump());
 }
 
 auto DetermineNonExplicitTarget(
@@ -1113,7 +1117,7 @@ auto main(int argc, char* argv[]) -> int {
                     return kExitSuccess;
                 }
 #ifndef BOOTSTRAP_BUILD_TOOL
-                Logger::Log(LogLevel::Info,
+                Logger::Log(LogLevel::Verbose,
                             "Analysed target {}",
                             result->id.ToString());
 
@@ -1124,7 +1128,7 @@ auto main(int argc, char* argv[]) -> int {
                     auto not_eligible = stats.ExportsNotEligibleCounter();
                     Logger::Log(
                         served + cached + uncached + not_eligible > 0
-                            ? LogLevel::Info
+                            ? LogLevel::Verbose
                             : LogLevel::Debug,
                         "Export targets found: {} cached, {}{} uncached, "
                         "{} not eligible for caching",
@@ -1149,7 +1153,7 @@ auto main(int argc, char* argv[]) -> int {
                 }
 
                 Logger::Log(
-                    LogLevel::Info,
+                    LogLevel::Verbose,
                     "{}ing{} {}.",
                     arguments.cmd == SubCommand::kRebuild ? "Rebuild" : "Build",
                     result->modified ? fmt::format(" input of action {} of",
@@ -1175,11 +1179,7 @@ auto main(int argc, char* argv[]) -> int {
 
                     // Repeat taintedness message to make the user aware that
                     // the artifacts are not for production use.
-                    ReportTaintedness(*result);
-                    if (build_result->failed_artifacts) {
-                        Logger::Log(LogLevel::Warning,
-                                    "Build result contains failed artifacts.");
-                    }
+                    ReportTaintedness(*result, LogLevel::Verbose);
                     return build_result->failed_artifacts
                                ? kExitSuccessFailedArtifacts
                                : kExitSuccess;
diff --git a/src/buildtool/progress_reporting/exports_progress_reporter.cpp b/src/buildtool/progress_reporting/exports_progress_reporter.cpp
index 30ca8935..ca3172c2 100644
--- a/src/buildtool/progress_reporting/exports_progress_reporter.cpp
+++ b/src/buildtool/progress_reporting/exports_progress_reporter.cpp
@@ -49,6 +49,6 @@ auto ExportsProgressReporter::Reporter(gsl::not_null<Statistics*> const& stats,
                 msg = fmt::format(
                     "{} ({}{})", msg, sample, active > 1 ? ", ..." : "");
             }
-            Logger::Log(logger, LogLevel::Progress, "{}", msg);
+            Logger::Log(logger, LogLevel::Verbose, "{}", msg);
         });
 }
diff --git a/src/other_tools/just_mr/cli.hpp b/src/other_tools/just_mr/cli.hpp
index 34bf8a7c..b5487609 100644
--- a/src/other_tools/just_mr/cli.hpp
+++ b/src/other_tools/just_mr/cli.hpp
@@ -280,6 +280,12 @@ static inline auto SetupMultiRepoLogArguments(
                        static_cast<int>(kLastLogLevel),
                        static_cast<int>(kDefaultLogLevel)))
         ->type_name("NUM");
+    app->add_flag_function(
+        "-v,--verbose",
+        [clargs](auto /*unused*/) { clargs->log_limit = LogLevel::Verbose; },
+        fmt::format(
+            "Enable verbose command line output (shortcut for --log-limit={})",
+            static_cast<int>(LogLevel::Verbose)));
     app->add_option_function<std::underlying_type_t<LogLevel>>(
            "--restrict-stderr-log-limit",
            [clargs](auto const& limit) {
diff --git a/src/other_tools/just_mr/launch.cpp b/src/other_tools/just_mr/launch.cpp
index 25e8656a..fd3bbb24 100644
--- a/src/other_tools/just_mr/launch.cpp
+++ b/src/other_tools/just_mr/launch.cpp
@@ -247,8 +247,9 @@ auto CallJust(std::optional<std::filesystem::path> const& config_file,
         cmd.emplace_back(*it);
     }
 
-    Logger::Log(
-        LogLevel::Info, "Setup finished, call {}", nlohmann::json(cmd).dump());
+    Logger::Log(LogLevel::Verbose,
+                "Setup finished, call {}",
+                nlohmann::json(cmd).dump());
 
     // create argv
     std::vector<char*> argv{};
diff --git a/src/other_tools/just_mr/main.cpp b/src/other_tools/just_mr/main.cpp
index d4f08290..f37a4e5b 100644
--- a/src/other_tools/just_mr/main.cpp
+++ b/src/other_tools/just_mr/main.cpp
@@ -226,6 +226,12 @@ auto main(int argc, char* argv[]) -> int {
         }
 
         SetupLogging(arguments.log);
+        if (arguments.common.just_mr_paths->workspace_root) {
+            Logger::Log(
+                LogLevel::Verbose,
+                "Using setup root {}",
+                arguments.common.just_mr_paths->workspace_root->string());
+        }
         auto config_file = ReadJustMRRC(&arguments);
         // As the rc file can contain logging parameters, reset the logging
         // configuration
diff --git a/src/other_tools/just_mr/setup.cpp b/src/other_tools/just_mr/setup.cpp
index 4c3dd31c..83f77948 100644
--- a/src/other_tools/just_mr/setup.cpp
+++ b/src/other_tools/just_mr/setup.cpp
@@ -52,7 +52,7 @@ auto MultiRepoSetup(std::shared_ptr<Configuration> const& config,
                     std::string multi_repo_tool_name)
     -> std::optional<std::filesystem::path> {
     // provide report
-    Logger::Log(LogLevel::Info, "Performing repositories setup");
+    Logger::Log(LogLevel::Verbose, "Performing repositories setup");
     // set anchor dir to setup_root; current dir will be reverted when anchor
     // goes out of scope
     auto cwd_anchor = FileSystemManager::ChangeDirectory(
-- 
